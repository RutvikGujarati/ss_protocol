import stateLogo from "../assets/state_logo.png";
import XerionLogo from "../assets/XerionLogo.png";
import FluxinLogo from "../assets/FluxinLogo.png";
import { Fluxin, Xerion } from "../Context/DavTokenContext";

export const getAuctionTokens = (
	stateUsdPrice,
	XerionUsdPrice,
	XerionRatioPrice,
	FluxinRatioPrice,
	FluxinUsdPrice,
	isReversed,
	AuctionRunning,
	userHashSwapped,
	RatioTargetsofTokens,
	outAmounts,
	Distributed,
	FluxinOnepBalance,
	XerionOnepBalance,
	SwapTokens,
	handleAddFluxin,
	handleAddXerion,
	handleAddTokenState
) => [
		{
			id: "state",
			name: "STATE",
			Pname: "pSTATE",
			ContractName: "state",
			image: stateLogo,
			Price: stateUsdPrice,
			userHasSwapped: false,
			AuctionStatus: true,
			onChart:
				"https://www.geckoterminal.com/pulsechain/pools/0x894fd7d05fe360a1d713c10b0e356af223fde88c",
			handleAddXerion: handleAddTokenState,
			distributedAmount: Distributed["state"],
		},
		{
			id: "Fluxin",
			name: "Fluxin",
			Pname: "Fluxin",
			ContractName: "Fluxin",
			image: FluxinLogo,
			ratio: `1:${RatioTargetsofTokens["Fluxin"]}`,
			currentRatio: `1:${FluxinRatioPrice}`,
			currentTokenRatio: FluxinRatioPrice,
			RatioTargetToken: RatioTargetsofTokens["Fluxin"],
			reverseRatio: `2:${FluxinRatioPrice}`,
			Price: FluxinUsdPrice,
			isReversing: isReversed.Fluxin.toString(),
			AuctionStatus: AuctionRunning.Fluxin === "true",
			userHasSwapped: userHashSwapped.Fluxin,
			onChart:
				"https://www.geckoterminal.com/pulsechain/pools/0x361afa3f5ef839bed6071c9f0c225b078eb8089a",
			distributedAmount: Distributed["Fluxin"],
			token: Fluxin,
			handleAddXerion: handleAddFluxin,
			inputTokenAmount: `${FluxinOnepBalance} Fluxin`,
			SwapT: () => SwapTokens("Fluxin", "Fluxin"),
			ratioPrice: FluxinRatioPrice,
			outputToken: `${outAmounts.Fluxin} State`,
		},
		{
			id: "Xerion",
			name: "Xerion",
			Pname: "Xerion",
			ContractName: "Xerion",
			image: XerionLogo,
			ratio: `1:${RatioTargetsofTokens["Xerion"]}`,
			userHasSwapped: userHashSwapped?.Xerion || false,
			currentRatio: `1:${XerionRatioPrice}`,
			reverseRatio: `2:${XerionRatioPrice}`,
			Price: XerionUsdPrice,
			currentTokenRatio: XerionRatioPrice,
			RatioTargetToken: RatioTargetsofTokens["Xerion"],
			isReversing: isReversed.Xerion.toString(),
			AuctionStatus: AuctionRunning.Xerion === "true",
			onChart:
				"https://www.geckoterminal.com/pulsechain/pools/0xc6359cd2c70f643888d556d377a4e8e25caadf77",
			distributedAmount: Distributed["Xerion"],
			token: Xerion,
			SwapT: () => SwapTokens("Xerion", "Xerion"),
			ratioPrice: XerionRatioPrice,
			handleAddXerion: handleAddXerion,
			inputTokenAmount: `${XerionOnepBalance} Xerion`,
			outputToken: `${outAmounts.Xerion} State`,
		},
	];
